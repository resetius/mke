project(phelm CXX C)

set(EXECUTABLE_OUTPUT_PATH "../bin")
include_directories(../src ../auxiliary)
link_directories(../lib)

add_executable(test_polynom test_polynom.cpp)
add_executable(test_integrate test_integrate.cpp)
add_executable(test_gmres test_gmres.cpp)
add_executable(test_solver test_solver.cpp)
add_executable(test_quadrature test_quadrature.c)
add_executable(test_funcgen test_funcgen.cpp)

target_link_libraries(test_polynom phelm phelm_aux ${UMFPACK})
target_link_libraries(test_integrate phelm phelm_aux ${UMFPACK})
target_link_libraries(test_gmres phelm phelm_aux ${UMFPACK})
target_link_libraries(test_quadrature phelm phelm_aux ${MATH})
target_link_libraries(test_funcgen phelm phelm_aux ${MATH} ${UMFPACK})
target_link_libraries(test_solver phelm phelm_aux ${UMFPACK} superlu blas)

if (OPENMP_FOUND)
set_target_properties(test_polynom PROPERTIES LINK_FLAGS ${OpenMP_C_FLAGS})
set_target_properties(test_integrate PROPERTIES LINK_FLAGS ${OpenMP_C_FLAGS})
set_target_properties(test_gmres PROPERTIES LINK_FLAGS ${OpenMP_C_FLAGS})
set_target_properties(test_solver PROPERTIES LINK_FLAGS ${OpenMP_C_FLAGS})
set_target_properties(test_quadrature PROPERTIES LINK_FLAGS ${OpenMP_C_FLAGS})
set_target_properties(test_funcgen PROPERTIES LINK_FLAGS ${OpenMP_C_FLAGS})
endif (OPENMP_FOUND)

if (WIN32)
set (LUA ${EXECUTABLE_OUTPUT_PATH}/lua)
else (WIN32)
set (LUA lua)
endif (WIN32)

add_test(test_polynom ${EXECUTABLE_OUTPUT_PATH}/test_polynom)
add_test(test_quadrature ${EXECUTABLE_OUTPUT_PATH}/test_quadrature)
add_test(test_integrate ${EXECUTABLE_OUTPUT_PATH}/test_integrate)
add_test(test_laplace ${LUA} ${CMAKE_CURRENT_SOURCE_DIR}/../scripts/test_laplace.lua ${EXECUTABLE_OUTPUT_PATH} test_laplace)
add_test(test_system_laplace ${LUA} ${CMAKE_CURRENT_SOURCE_DIR}/../scripts/test_system_laplace.lua ${EXECUTABLE_OUTPUT_PATH})
add_test(test_slaplace_full ${LUA} ${CMAKE_CURRENT_SOURCE_DIR}/../scripts/test_slaplace.lua ${EXECUTABLE_OUTPUT_PATH} full)
add_test(test_slaplace_half ${LUA} ${CMAKE_CURRENT_SOURCE_DIR}/../scripts/test_slaplace.lua ${EXECUTABLE_OUTPUT_PATH} half)
add_test(test_slaplace_test ${LUA} ${CMAKE_CURRENT_SOURCE_DIR}/../scripts/test_slaplace.lua ${EXECUTABLE_OUTPUT_PATH} test)
add_test(test_slaplace_test2 ${LUA} ${CMAKE_CURRENT_SOURCE_DIR}/../scripts/test_slaplace.lua ${EXECUTABLE_OUTPUT_PATH} test2)
add_test(test_gmres ${EXECUTABLE_OUTPUT_PATH}/test_gmres)

if (CUDA_FOUND)
	cuda_add_executable(test_gmres_cu test_gmres.cpp)
	target_link_libraries(test_gmres_cu phelm_cu phelm_aux_cu)
	cuda_add_cublas_to_target(test_gmres_cu)
	set_target_properties(test_gmres_cu PROPERTIES COMPILE_FLAGS "-DGPGPU")

	cuda_add_executable(test_gpu_reduction test_gpu_reduction.cpp)
	target_link_libraries(test_gpu_reduction phelm_cu)
	cuda_add_cublas_to_target(test_gpu_reduction)
	set_target_properties(test_gpu_reduction PROPERTIES COMPILE_FLAGS "-DGPGPU")

	if (OPENMP_FOUND)
		set_target_properties(test_gmres_cu PROPERTIES LINK_FLAGS ${OpenMP_C_FLAGS})
		set_target_properties(test_gpu_reduction PROPERTIES LINK_FLAGS ${OpenMP_C_FLAGS})
	endif (OPENMP_FOUND)

	add_test(test_gmres_cu ${EXECUTABLE_OUTPUT_PATH}/test_gmres_cu)
	add_test(test_gpu_reduction ${EXECUTABLE_OUTPUT_PATH}/test_gpu_reduction)
	add_test(test_laplace_cu ${LUA} ${CMAKE_CURRENT_SOURCE_DIR}/../scripts/test_laplace.lua ${EXECUTABLE_OUTPUT_PATH} test_laplace_cu)
endif (CUDA_FOUND)

